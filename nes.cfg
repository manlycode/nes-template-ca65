MEMORY {
    ZP:     start = $00,    size = $0100, type = rw, file = "";
    OAM:    start = $0200,  size = $0100, type = rw, file = "";
    RAM:    start = $0300,  size = $0500, type = rw, file = "";
    HDR:    start = $0000,  size = $0010, type = ro, file = %O, fill = yes, fillval = $00;
    PRG:    start = $8000,  size = $8000, type = ro, file = %O, fill = yes, fillval = $00;
    CHR:    start = $0000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00;
}

SEGMENTS {
    ZEROPAGE: load = ZP,  type = zp;
    OAM:      load = OAM, type = bss, align = $100;
    BSS:      load = RAM, type = bss;
    HEADER:   load = HDR, type = ro;
    CODE:     load = PRG, type = ro,  start = $8000;
    RODATA:   load = PRG, type = ro;
    VECTORS:  load = PRG, type = ro,  start = $FFFA;
    TILES:    load = CHR, type = ro;
}

## Taken from vendor/cc65/cfg/nes.cfg
##
#SYMBOLS {
#    __STACKSIZE__: type = weak, value = $0300; # 3 pages stack
#}
#MEMORY {
#    ZP:     file = "", start = $0002, size = $001A, type = rw, define = yes;

#    # INES Cartridge Header
#    HEADER: file = %O, start = $0000, size = $0010, fill = yes;

#    # 2 16K ROM Banks
#    # - startup
#    # - code
#    # - rodata
#    # - data (load)
#    ROM0:   file = %O, start = $8000, size = $7FFA, fill = yes, define = yes;

#    # Hardware Vectors at End of 2nd 8K ROM
#    ROMV:   file = %O, start = $FFFA, size = $0006, fill = yes;

#    # 1 8k CHR Bank
#    ROM2:   file = %O, start = $0000, size = $2000, fill = yes;

#    # standard 2k SRAM (-zeropage)
#    # $0100-$0200 cpu stack
#    # $0200-$0500 3 pages for ppu memory write buffer
#    # $0500-$0800 3 pages for cc65 parameter stack
#    SRAM:   file = "", start = $0500, size = __STACKSIZE__, define = yes;

#    # additional 8K SRAM Bank
#    # - data (run)
#    # - bss
#    # - heap
#    RAM:    file = "", start = $6000, size = $2000, define = yes;
#}
#SEGMENTS {
#    ZEROPAGE: load = ZP,              type = zp;
#    HEADER:   load = HEADER,          type = ro;
#    STARTUP:  load = ROM0,            type = ro,  define   = yes;
#    LOWCODE:  load = ROM0,            type = ro,  optional = yes;
#    ONCE:     load = ROM0,            type = ro,  optional = yes;
#    CODE:     load = ROM0,            type = ro,  define   = yes;
#    RODATA:   load = ROM0,            type = ro,  define   = yes;
#    DATA:     load = ROM0, run = RAM, type = rw,  define   = yes;
#    VECTORS:  load = ROMV,            type = rw;
#    CHARS:    load = ROM2,            type = rw;
#    BSS:      load = RAM,             type = bss, define   = yes;
#}
#FEATURES {
#    CONDES: type    = constructor,
#            label   = __CONSTRUCTOR_TABLE__,
#            count   = __CONSTRUCTOR_COUNT__,
#            segment = ONCE;
#    CONDES: type    = destructor,
#            label   = __DESTRUCTOR_TABLE__,
#            count   = __DESTRUCTOR_COUNT__,
#            segment = RODATA;
#    CONDES: type    = interruptor,
#            label   = __INTERRUPTOR_TABLE__,
#            count   = __INTERRUPTOR_COUNT__,
#            segment = RODATA,
#            import  = __CALLIRQ__;
#}
